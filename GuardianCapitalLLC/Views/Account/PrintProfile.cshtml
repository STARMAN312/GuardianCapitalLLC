@model PrintProfileVM
@using System.Text.RegularExpressions
@{
	Layout = "_ClientLayout";
}
<style>
	@@media print {
		.no-print

	{
		display: none !important;
	}

	}
</style>
<div class="row account-information">
	<div class="col-xxl-12 col-xl-12 col-lg-12 col-md-12 col-sm-12">
		<div class="row">
			<div class="col-xl-12 col-lg-12 col-md-12 col-xs-12">
				<div class="card p-2">
					<div class="card-body">
						<div class="row">
							<div class="col-xl-9 col-lg-7 col-md-6 col-sm-12">
								<div class="text-justified align-items-center">
									<h3 class="text-dark font-weight-semibold mb-2 mt-0"><span class="text-primary">@Model.FullName</span></h3>
								</div>
							</div>
						</div>
						<div>
							<div class="card-header pb-1">
								<h3 class="card-title mb-2">Account Summary</h3>
							</div>
							<div class="browser-stats">
								<div class="d-flex align-items-center item  border-bottom my-2">
									<div class="d-flex">
										<div class="">
											<span class="font-weight-semibold tx-20">Total Balance</span>
										</div>
									</div>
									<div class="ms-auto my-auto">
										<div class="d-flex">
											<span class="me-4 mt-1 font-weight-semibold tx-20 market-price text-success" data-usd="@Model.TotalBalance">
												<span class="balance-text">$@Model.TotalBalance.ToString("N2") USD</span>
											</span>
										</div>
									</div>
								</div>
								@foreach (BankAccount bankAccount in Model.BankAccounts)
								{
									<div class="d-flex align-items-center item  border-bottom my-2">
										<div class="d-flex">
											<div class="">
												<h6 class="">@Regex.Replace(bankAccount.Type.ToString(), "(\\B[A-Z])", " $1") Account</h6>
											</div>
										</div>
										<div class="ms-auto my-auto">
											<div class="d-flex">
												<span class="me-4 mt-1 font-weight-semibold tx-16 market-price" data-usd="@bankAccount.Balance"><span class="balance-text">$@bankAccount.Balance.ToString("N2")</span></span>
											</div>
										</div>
									</div>
								}
							</div>
						</div>
					</div>
					<div>
						<div class="card-header pb-1">
							<h3 class="card-title mb-2">Transaction History</h3>
						</div>
						<div class="table-responsive mt-2">
							<table class="table table-bordered table-striped mg-b-0 text-md-nowrap">
								<thead>
									<tr>
										<th class="border-bottom-0">Date</th>
										<th class="border-bottom-0">Account</th>
										<th class="border-bottom-0">Transaction</th>
										<th class="border-bottom-0">Amount</th>
									</tr>
								</thead>
								<tbody>
									@foreach (TransactionVM transaction in Model.Transactions)
									{
										<tr>
											<td>@transaction.Date.ToLocalTime().ToString("MM-dd-yyyy HH:mm tt")</td>
											<td>@Regex.Replace(transaction.AccountName, "(\\B[A-Z])", " $1")</td>
											<td>@Regex.Replace(transaction.Type.ToString(), "(\\B[A-Z])", " $1")</td>
											@if (transaction.Type.ToString().Contains("Transfer") || transaction.Type.ToString() == "Withdrawal" || transaction.Type.ToString() == "ServiceFee")
											{
												<td class="market-price" data-usd="@transaction.Amount" data-type="debit">-$@transaction.Amount.ToString("N2")</td>
											}
											else
											{
												<td class="market-price" data-usd="@transaction.Amount" data-type="credit">+$@transaction.Amount.ToString("N2")</td>
											}
										</tr>
									}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="text-end mt-4 mb-4 no-print account-information">
	<a class="btn btn-outline-primary" asp-action="Index" asp-controller="Account">Cancel</a>
	<button class="btn btn-outline-primary" onclick="javascript:window.print();">🖨️ Print User Profile</button>
</div>

<script>
	
	console.log("Script loaded and running.");


		document.addEventListener("DOMContentLoaded", function () {
		const exchangeRates = JSON.parse(localStorage.getItem("exchangeRates") || "{}");
		const selectedCurrency = localStorage.getItem("selectedCurrency") || "USD";

		const currencySymbols = {
			USD: "$", CAD: "$", EUR: "€", GBP: "£",
			JPY: "¥", MXN: "$", KWD: "د.ك"
		};

		function formatPrice(value, currency) {
			const symbol = currencySymbols[currency] || '';
			return symbol + value.toLocaleString(undefined, { minimumFractionDigits: 2 }) + " " + currency;
		}

		function convertPrice(priceInUsd, currency) {
			if (!exchangeRates[currency] || !exchangeRates["USD"]) return priceInUsd;
			return priceInUsd * exchangeRates[currency] / exchangeRates["USD"];
		}

		// Convert all price elements
		document.querySelectorAll('.market-price').forEach(td => {
			const priceUsd = parseFloat(td.getAttribute('data-usd'));
			if (isNaN(priceUsd)) return;

			const type = td.getAttribute('data-type'); // e.g. debit or credit
			let sign = "";
			if (type === "debit") {
				sign = "-";
			} else if (type === "credit") {
				sign = "+";
			}

			const converted = convertPrice(priceUsd, selectedCurrency);
			const formatted = formatPrice(converted, selectedCurrency);

			td.textContent = `${sign}${formatted}`;
		});

		// Update balance display
		const balanceEl = document.getElementById("convertedBalance");
		if (balanceEl) {
			const value = parseFloat(balanceEl.getAttribute("data-value")) || 0;
			balanceEl.textContent = formatPrice(value, selectedCurrency);
		}
	});


</script>