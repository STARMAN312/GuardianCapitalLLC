@model InternalTransferFundsVM
@using System.Text.RegularExpressions

@{
	Layout = "_ClientLayout";
}

<div class="mt-2 account-information">
	<div class="card bg-gray-200 bd-0">
		<div class="card-body">
			<h5 class="tx-dark tx-medium mg-b-10">Transfer funds between accounts</h5>
			<form asp-action="ReviewInternalTransfer" method="post">
				@if (!ViewData.ModelState.IsValid)
				{
					<div class="card bg-warning text-white">
						<div class="card-body d-flex align-items-center p-3">
							<i class="fas fa-exclamation-circle me-2"></i>
							<div asp-validation-summary="ModelOnly" class="validation-summary-no-bullets flex-grow-1"></div>
						</div>
					</div>
				}
				<input type="hidden" id="Amount" asp-for="Amount" />
				<div class="form-group">
					<label for="fromAccount">From Account</label>
					<select class="form-control" asp-for="FromAccountId" id="fromAccount">
						<option disabled selected value="">-- Select source account --</option>
						@foreach (var acc in Model.BankAccounts)
						{
							<option value="@acc.Id">@Regex.Replace(acc.Type.ToString(), "(\\B[A-Z])", " $1") - $@acc.Balance.ToString("N2")</option>
						}
					</select>
				</div>

				<div class="form-group mt-2">
					<label for="toAccount">To Account</label>
					<select class="form-control" asp-for="ToAccountId" id="toAccount">
						<option disabled selected value="">-- Select destination account --</option>
						@foreach (var acc in Model.BankAccounts)
						{
							<option value="@acc.Id">@Regex.Replace(acc.Type.ToString(), "(\\B[A-Z])", " $1") - $@acc.Balance.ToString("N2")</option>
						}
					</select>
				</div>

				<div class="form-group">
					<label>Amount</label>
					<div class="input-group mb-3">
						<span class="input-group-text bg-info-transparent text-info" id="basic-addon1">$</span>
						<input type="text" id="AmountInput" name="Amount" class="form-control" placeholder="0.00" />
					</div>
				</div>

				<div class="form-group">
					<label class="form-label">Security Pin</label>
					<input asp-for="Pin" type="password" class="form-control" placeholder="Enter your 4-digit PIN" maxlength="4" inputmode="numeric" pattern="\d{4}">
				</div>

				<div class="modal-footer">
					<a asp-controller="Account" asp-action="Index" class="btn btn-outline-dark ms-4 px-5">Cancel</a>
					<button type="submit" class="btn btn-info px-5">Review Transfer</button>
				</div>
			</form>
		</div>
	</div>
</div>

<script>

	const formattedInput = document.getElementById('AmountInput');
	const hiddenInput = document.getElementById('Amount');

	formattedInput.addEventListener('input', function () {
		const rawValue = formattedInput.value.replace(/,/g, '');
		hiddenInput.value = rawValue;
	});

		document.getElementById('AmountInput').addEventListener('input', function (e) {
		const input = e.target;
		let value = input.value;

		// Save cursor position before formatting
		let selectionStart = input.selectionStart;
		let selectionEnd = input.selectionEnd;

		// Count commas before formatting to calculate position change later
		const commasBefore = (value.slice(0, selectionStart).match(/,/g) || []).length;

		// Remove all except digits and dot
		value = value.replace(/[^\d.]/g, '');

		// Allow only one dot
		const parts = value.split('.');
		if (parts.length > 2) {
			value = parts.shift() + '.' + parts.join('');
		}

		// Check if ends with a dot (to preserve)
		const endsWithDot = value.endsWith('.');

		// Split integer and decimal parts
		const [intPart, decimalPartRaw] = value.split('.');
		let decimalPart = decimalPartRaw || '';

		if (decimalPart.length > 2) {
			decimalPart = decimalPart.substring(0, 2);
		}

		// Format integer with commas
		const intFormatted = intPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');

		// Rebuild formatted value
		const formattedValue = endsWithDot
			? `${intFormatted}.`
			: decimalPart
			? `${intFormatted}.${decimalPart}`
			: intFormatted;

		// Set the formatted value
		input.value = formattedValue;

		// Count commas after formatting (before cursor)
		const commasAfter = (formattedValue.slice(0, selectionStart).match(/,/g) || []).length;

		// Calculate the new cursor position based on commas added/removed
		const commaDifference = commasAfter - commasBefore;
		let newPos = selectionStart + commaDifference;

		// Handle edge cases where cursor is after the dot
		if (endsWithDot && newPos === formattedValue.length - 1) {
			newPos = formattedValue.length;
		}

		// Set cursor position
		input.setSelectionRange(newPos, newPos);

		// Update hidden input with raw value (no commas)
		document.getElementById('Amount').value = decimalPart || endsWithDot
			? intPart + '.' + decimalPart
			: intPart;
	});

		document.addEventListener('DOMContentLoaded', function () {
		const fromSelect = document.getElementById('fromAccount');
		const toSelect = document.getElementById('toAccount');

		function updateSelectOptions() {
			const selectedFrom = fromSelect.value;
			const selectedTo = toSelect.value;

			// Enable all options first
			for (const option of fromSelect.options) {
				option.disabled = false;
			}
			for (const option of toSelect.options) {
				option.disabled = false;
			}

			// Disable selected value in the opposite select
			if (selectedTo) {
				for (const option of fromSelect.options) {
					if (option.value === selectedTo) {
						option.disabled = true;
					}
				}
			}

			if (selectedFrom) {
				for (const option of toSelect.options) {
					if (option.value === selectedFrom) {
						option.disabled = true;
					}
				}
			}
		}

		fromSelect.addEventListener('change', updateSelectOptions);
		toSelect.addEventListener('change', updateSelectOptions);

		// Initial update in case defaults are set
		updateSelectOptions();
	});

</script>